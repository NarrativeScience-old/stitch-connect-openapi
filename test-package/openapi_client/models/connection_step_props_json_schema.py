# coding: utf-8

"""
    Stitch Connect

    https://www.stitchdata.com/docs/developers/stitch-connect/api  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ConnectionStepPropsJsonSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'pattern': 'str',
        'any_of': 'list[ConnectionStepPropsAnyOf]'
    }

    attribute_map = {
        'type': 'type',
        'pattern': 'pattern',
        'any_of': 'anyOf'
    }

    def __init__(self, type=None, pattern=None, any_of=None, local_vars_configuration=None):  # noqa: E501
        """ConnectionStepPropsJsonSchema - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._pattern = None
        self._any_of = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if pattern is not None:
            self.pattern = pattern
        if any_of is not None:
            self.any_of = any_of

    @property
    def type(self):
        """Gets the type of this ConnectionStepPropsJsonSchema.  # noqa: E501

        A string indicating the expected data type of the property’s value. For example: boolean   # noqa: E501

        :return: The type of this ConnectionStepPropsJsonSchema.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectionStepPropsJsonSchema.

        A string indicating the expected data type of the property’s value. For example: boolean   # noqa: E501

        :param type: The type of this ConnectionStepPropsJsonSchema.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def pattern(self):
        """Gets the pattern of this ConnectionStepPropsJsonSchema.  # noqa: E501

        A string indicating the expected pattern of the property’s value. For example: ^\\\\d+$   # noqa: E501

        :return: The pattern of this ConnectionStepPropsJsonSchema.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this ConnectionStepPropsJsonSchema.

        A string indicating the expected pattern of the property’s value. For example: ^\\\\d+$   # noqa: E501

        :param pattern: The pattern of this ConnectionStepPropsJsonSchema.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def any_of(self):
        """Gets the any_of of this ConnectionStepPropsJsonSchema.  # noqa: E501

        A series of arrays containing key-value pairs for the type and format combinations Stitch will accept as the property’s value. F   # noqa: E501

        :return: The any_of of this ConnectionStepPropsJsonSchema.  # noqa: E501
        :rtype: list[ConnectionStepPropsAnyOf]
        """
        return self._any_of

    @any_of.setter
    def any_of(self, any_of):
        """Sets the any_of of this ConnectionStepPropsJsonSchema.

        A series of arrays containing key-value pairs for the type and format combinations Stitch will accept as the property’s value. F   # noqa: E501

        :param any_of: The any_of of this ConnectionStepPropsJsonSchema.  # noqa: E501
        :type: list[ConnectionStepPropsAnyOf]
        """

        self._any_of = any_of

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionStepPropsJsonSchema):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectionStepPropsJsonSchema):
            return True

        return self.to_dict() != other.to_dict()
